#!/bin/bash
# FYI, this command removes file abc if it is empty: [ -s abc ] || rm -f abc

usage="usage: $0 encryptionport decryptionport"

#use the standard version of echo
echo=/bin/echo

#Make sure we have the right number of arguments
if test $# -gt 2 -o $# -lt 2
then
	${echo} $usage 1>&2
	exit 1
fi

#Clean up any previous runs
${echo} '#Initializing - Cleaning up - ignore Operation Not Permitted errors'
${echo} '#Note: this script requires that the current directory (.) be in your PATH in ~/.bashrc'
killall -u $USER otp_*
rm -f ptFiles/ciphertext*
rm -f ptFiles/plaintext*_*
rm -f key20
rm -f key70000

#Record the ports passed in
encport=$1
decport=$2

#Run the daemons
./otp_enc_d $encport &
./otp_dec_d $decport &

sleep 2

${echo}
${echo} '#-----------------------------------------'
${echo} '#START OF GRADING SCRIPT'
${echo} '#keygen 20 > key20'
./keygen 20 > key20
${echo} "#5 POINTS: key20 must exist"
[ -s key20 ] || rm -f key20
if [ -f key20 ]; then ${echo} 'key20 exists!'; else ${echo} 'key20 DOES NOT EXIST'; fi
${echo}
${echo} "#-----------------------------------------"
${echo} "#5 POINTS: Number of characters in key20, should be 21:"
wc -m key20
${echo}
${echo} "#-----------------------------------------"
${echo} '#keygen 70000 > key70000'
./keygen 70000 > key70000
${echo} "#5 POINTS: Number of characters in key70000, should be 70001:"
[ -s key70000 ] || rm -f key70000
wc -m key70000
${echo}
${echo} "#-----------------------------------------"
${echo} '#otp_enc ptFiles/plaintext1 key20 $encport'
${echo} "#10 POINTS: Should return error about too-short key"
./otp_enc ptFiles/plaintext1 key20 $encport
${echo}
${echo} "#-----------------------------------------"
${echo} '#otp_enc ptFiles/plaintext1 key70000 $encport'
${echo} "#20 POINTS: Should return encrypted version of ptFiles/plaintext1"
./otp_enc ptFiles/plaintext1 key70000 $encport
${echo}
${echo} '#-----------------------------------------'
${echo} '#otp_enc ptFiles/plaintext1 key70000 $encport > ptFiles/ciphertext1'
./otp_enc ptFiles/plaintext1 key70000 $encport > ptFiles/ciphertext1
${echo} "#10 POINTS: ptFiles/ciphertext1 must exist"
[ -s ptFiles/ciphertext1 ] || rm -f ptFiles/ciphertext1
if [ -f ptFiles/ciphertext1 ]; then ${echo} 'ptFiles/ciphertext1 exists!'; else ${echo} 'ptFiles/ciphertext1 DOES NOT EXIST'; fi
${echo}
${echo} '#-----------------------------------------'
${echo} '#10 POINTS: ptFiles/ciphertext1 must be same number of chars as source'
${echo} '#wc -m ptFiles/plaintext1'
wc -m ptFiles/plaintext1
${echo} '#Should be same: wc -m ptFiles/ciphertext1'
wc -m ptFiles/ciphertext1
${echo}
${echo} '#-----------------------------------------'
${echo} '#5 POINTS: ptFiles/ciphertext1 should look encrypted'
cat ptFiles/ciphertext1
${echo}
${echo} '#-----------------------------------------'
${echo} '#otp_dec ptFiles/ciphertext1 key70000 $encport'
${echo} '#5 POINTS: Should fail giving error that otp_dec cannot use otp_enc_d'
./otp_dec ptFiles/ciphertext1 key70000 $encport
${echo}
${echo} '#-----------------------------------------'
${echo} '#20 POINTS: should return decrypted ptFiles/ciphertext1 that matches source'
${echo} '#cat ptFiles/plaintext1'
cat ptFiles/plaintext1
${echo} '#otp_dec ptFiles/ciphertext1 key70000 $decport'
./otp_dec ptFiles/ciphertext1 key70000 $decport
${echo}
${echo} '#-----------------------------------------'
${echo} '#otp_dec ptFiles/ciphertext1 key70000 $decport > ptFiles/plaintext1_a'
./otp_dec ptFiles/ciphertext1 key70000 $decport > ptFiles/plaintext1_a
${echo} "#10 POINTS: ptFiles/plaintext1_a must exist"
[ -s ptFiles/plaintext1_a ] || rm -f ptFiles/plaintext1_a
if [ -f ptFiles/plaintext1_a ]; then ${echo} 'ptFiles/plaintext1_a exists!'; else ${echo} 'ptFiles/plaintext1_a DOES NOT EXIST'; fi
${echo}
${echo} '#-----------------------------------------'
${echo} '#cmp ptFiles/plaintext1 ptFiles/plaintext1_a'
${echo} '#5 POINTS: ptFiles/plaintext1 must be the same as ptFiles/plaintext1_a:'
${echo} '#echo $? should be == 0, which means the cmp succeeded!'
cmp ptFiles/plaintext1 ptFiles/plaintext1_a
echo $?
${echo}
${echo} '#-----------------------------------------'
${echo} '#20 POINTS: concurrent test of encryption - look for 4 properly-sized ptFiles/ciphertext# files, or 5 where the 5th is 0 bytes'
${echo} '#5 POINTS: Should be only one error about ptFiles/plaintext5 being bad'
rm -f ptFiles/ciphertext*
rm -f ptFiles/plaintext*_*
./otp_enc ptFiles/plaintext1 key70000 $encport > ptFiles/ciphertext1 &
./otp_enc ptFiles/plaintext2 key70000 $encport > ptFiles/ciphertext2 &
./otp_enc ptFiles/plaintext3 key70000 $encport > ptFiles/ciphertext3 &
./otp_enc ptFiles/plaintext4 key70000 $encport > ptFiles/ciphertext4 &
./otp_enc ptFiles/plaintext5 key70000 $encport > ptFiles/ciphertext5 &
${echo} 'Ten second sleep, your program must complete in this time'
sleep 10
ls -pla ptFiles
${echo}
${echo} '#-----------------------------------------'
${echo} '#15 POINTS: concurrent test of decryption - look for 4 ptFiles/plaintext#_a files that match the ptFiles/plaintext# files'
./otp_dec ptFiles/ciphertext1 key70000 $decport > ptFiles/plaintext1_a &
./otp_dec ptFiles/ciphertext2 key70000 $decport > ptFiles/plaintext2_a &
./otp_dec ptFiles/ciphertext3 key70000 $decport > ptFiles/plaintext3_a &
./otp_dec ptFiles/ciphertext4 key70000 $decport > ptFiles/plaintext4_a &
${echo} '#Ten second sleep, your program must complete in this time'
sleep 10
ls -pla ptFiles

#Clean up
${echo}
${echo} '#-----------------------------------------'
${echo} '#Cleaning up - ignore Operation Not Permitted errors'
killall -u $USER otp_*
rm -f ptFiles/ciphertext*
rm -f ptFiles/plaintext*_*
rm -f key20
rm -f key70000
${echo}
${echo} '#SCRIPT COMPLETE'
